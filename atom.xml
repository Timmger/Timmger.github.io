<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Time Manager</title>
  
  <subtitle>時は動き出す</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://timmger.github.io/"/>
  <updated>2019-09-21T12:15:47.159Z</updated>
  <id>https://timmger.github.io/</id>
  
  <author>
    <name>Allen Timmger</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Git漫游指南》</title>
    <link href="https://timmger.github.io/2019/09/19/%E3%80%8AGit%E6%BC%AB%E6%B8%B8%E6%8C%87%E5%8D%97%E3%80%8B/"/>
    <id>https://timmger.github.io/2019/09/19/《Git漫游指南》/</id>
    <published>2019-09-19T09:25:13.000Z</published>
    <updated>2019-09-21T12:15:47.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-版本控制"><a href="#1-版本控制" class="headerlink" title="1. 版本控制"></a>1. 版本控制</h2><h3 id="1-1-什么是版本控制"><a href="#1-1-什么是版本控制" class="headerlink" title="1.1 什么是版本控制"></a>1.1 什么是版本控制</h3><p><strong>版本控制</strong>是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。<strong>版本控制系统(VCS)</strong>，在需要的时候可以将文件回溯到之前的状态，还可以显示当前版本与之前版本文件改动的细节。</p><h3 id="1-2-版本控制系统类别"><a href="#1-2-版本控制系统类别" class="headerlink" title="1.2 版本控制系统类别"></a>1.2 版本控制系统类别</h3><h4 id="本地版本控制系统"><a href="#本地版本控制系统" class="headerlink" title="本地版本控制系统"></a>本地版本控制系统</h4><p>RCS  </p><p><strong>原理</strong>：在硬盘上保存补丁集（文件修订前后变化），通过应用补丁集，可以计算出各个版本文件内容。<br><strong>缺点</strong>：不可协同工作，风险集中</p><h4 id="集中的版本控制系统（CVCS）"><a href="#集中的版本控制系统（CVCS）" class="headerlink" title="集中的版本控制系统（CVCS）"></a>集中的版本控制系统（CVCS）</h4><p>CVS、Subversion(SVN)、Perforce  </p><p><strong>原理</strong>：由单一集中管理的服务器保存所有的文件修订版本，协同工作通过客户端连接，取出最新文件或提交更新。<br><strong>优点</strong>：增加了项目的透明度，管理员权限集中，维护更容易<br><strong>缺点</strong>：中央服务器风险集中</p><h4 id="分布式版本控制系统（DVCS）"><a href="#分布式版本控制系统（DVCS）" class="headerlink" title="分布式版本控制系统（DVCS）"></a>分布式版本控制系统（DVCS）</h4><p>Git、Mercurial、Bazaar、Darcs</p><p><strong>原理</strong>：每个客户端都将代码仓库完整克隆，若发生故障，可由任一镜像的本地仓库恢复。并且，这类系统可以指定若干不同的远端代码仓库进行交互<br><strong>优点</strong>：支持非线性开发模式、完全分布式、高速且适用大型项目（本地执行）、风险趋零。</p><h3 id="1-3-Git工作流程"><a href="#1-3-Git工作流程" class="headerlink" title="1.3 Git工作流程"></a>1.3 Git工作流程</h3><ol><li><p>在<strong>工作目录</strong>中修改(modified)文件。</p></li><li><p>暂存(staged)文件，将文件的快照放入<strong>暂存区域</strong>。</p></li><li><p>提交(committed)更新，找到<strong>暂存区域</strong>的文件，将快照永久性存储到 Git <strong>仓库目录</strong>。</p></li></ol><h2 id="2-命令行"><a href="#2-命令行" class="headerlink" title="2. 命令行"></a>2. 命令行</h2><h3 id="2-1-初次配置"><a href="#2-1-初次配置" class="headerlink" title="2.1 初次配置"></a>2.1 初次配置</h3><p>安装：<strong>略</strong>  </p><p>设置用户名和邮件地址</p><blockquote><p>\$ git config –global user.name “timmger”<br>\$ git config –global user.email <a href="mailto:timmgerable@gmail.com" target="_blank" rel="noopener">timmgerable@gmail.com</a></p></blockquote><h3 id="2-2-仓库"><a href="#2-2-仓库" class="headerlink" title="2.2 仓库"></a>2.2 仓库</h3><p><strong>仓库</strong>(repository), 版本控制中最基本的模块，存储项目积攒的所有版本和元数据。<br><strong>“本地” 仓库</strong>（local repository）: 放置在本地计算机，只有本人有权操作改动该仓库。<br><strong>“远程” 仓库</strong>（remote repository）：位于远程服务器，由“.git”仓库目录组成，由团队进行数据共享与交换</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-版本控制&quot;&gt;&lt;a href=&quot;#1-版本控制&quot; class=&quot;headerlink&quot; title=&quot;1. 版本控制&quot;&gt;&lt;/a&gt;1. 版本控制&lt;/h2&gt;&lt;h3 id=&quot;1-1-什么是版本控制&quot;&gt;&lt;a href=&quot;#1-1-什么是版本控制&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Git" scheme="https://timmger.github.io/categories/Git/"/>
    
    
      <category term="git" scheme="https://timmger.github.io/tags/git/"/>
    
      <category term="分布式" scheme="https://timmger.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="DVCS" scheme="https://timmger.github.io/tags/DVCS/"/>
    
  </entry>
  
  <entry>
    <title>《从零到一——成为一名Linux Sysadmin》- Bash</title>
    <link href="https://timmger.github.io/2019/09/18/%E3%80%8A%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E2%80%94%E2%80%94%E2%80%94%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8DLinux-Sysadmin%E3%80%8B-%E4%BA%94/"/>
    <id>https://timmger.github.io/2019/09/18/《从零到一———成为一名Linux-Sysadmin》-五/</id>
    <published>2019-09-18T14:50:32.000Z</published>
    <updated>2019-09-21T12:14:49.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Bash脚本编程入门"><a href="#Bash脚本编程入门" class="headerlink" title="Bash脚本编程入门"></a>Bash脚本编程入门</h2><h3 id="1-一个bash脚本"><a href="#1-一个bash脚本" class="headerlink" title="1. 一个bash脚本"></a>1. 一个bash脚本</h3><p><code>helloworld.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author: timmger</span></span><br><span class="line"><span class="comment"># date: 2019/9/19</span></span><br><span class="line"></span><br><span class="line">message=<span class="string">"Hello, World!"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$message</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> $?</span><br></pre></td></tr></table></figure><p>添加others执行权限</p><blockquote><p><strong>chmod +x ./helloworld.sh</strong></p></blockquote><p>运行脚本</p><blockquote><p><strong>bash ./helloworld.sh</strong> 或 <strong>./helloworld.sh</strong></p></blockquote><p>执行并封装公用代码，可导入另一个脚本的变量</p><blockquote><p><strong>source ./helloworld.sh</strong> 或 <strong>. helloworld.sh</strong></p></blockquote><h3 id="2-变量和字符串（Variables-and-String）"><a href="#2-变量和字符串（Variables-and-String）" class="headerlink" title="2. 变量和字符串（Variables and String）"></a>2. <strong>变量</strong>和<strong>字符串</strong>（Variables and String）</h3><p><strong>定义变量</strong>：</p><blockquote><p><strong>name=”timmger”</strong></p></blockquote><p>变量名与等号之间不能有空格, 命名只能使用英文字母，数字和下划线</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ name=<span class="string">"timmger"</span></span><br><span class="line">timmger@timmger-virtual-machine:~$ <span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line">timmger</span><br><span class="line">timmger@timmger-virtual-machine:~$</span><br></pre></td></tr></table></figure><p>使用变量时，在变量名前加入美元符号 <strong>\$</strong>, 可使用括号限定边界</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ <span class="built_in">echo</span> <span class="string">"my name is <span class="variable">$name</span>"</span></span><br><span class="line">my name is timmger</span><br><span class="line">timmger@timmger-virtual-machine:~$ <span class="built_in">echo</span> <span class="string">"my name is <span class="variable">$&#123;name&#125;</span>(time manager)"</span></span><br><span class="line">my name is timmger(time manager)</span><br></pre></td></tr></table></figure><p><strong>删除变量</strong>：</p><p>使用 <strong>ubset</strong> 可以删除变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ <span class="built_in">unset</span> name</span><br><span class="line">timmger@timmger-virtual-machine:~$ <span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line"></span><br><span class="line">timmger@timmger-virtual-machine:~$</span><br></pre></td></tr></table></figure></p><p><strong>字符串</strong>：</p><p>获取字符串长度<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"abcd"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string&#125;</span> <span class="comment">#输出4</span></span><br></pre></td></tr></table></figure></p><p>切片（slicing）</p><p>${name:m:n}<br>从第m个字符开始截取n个字符</p><blockquote><p>string=”I am cool”<br>echo \${string:0:4} #输出 I am</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">"Timmger"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name/T/t&#125;</span>    <span class="comment">#=&gt; "timmger" 替换(substitution)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name:0:3&#125;</span>    <span class="comment">#=&gt; "Tim" (slicing)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name::3&#125;</span>     <span class="comment">#=&gt; "Tim" (slicing)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name::-1&#125;</span>    <span class="comment">#=&gt; "Timmge" 倒数第一个结束，不包含(slicing)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name:(-1)&#125;</span>   <span class="comment">#=&gt; "r" 从右开始(slicing from right)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name:(-2):1&#125;</span> <span class="comment">#=&gt; "e" (slicing from right)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;food:-Cake&#125;</span>  <span class="comment">#=&gt; 如果food没赋值。设定默认值Cake</span></span><br></pre></td></tr></table></figure><p>匹配（match）替换（substitution）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">STR=<span class="string">"/path/to/cool.java"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;STR%.java&#125;</span>    <span class="comment"># /path/to/cool</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;STR%.java&#125;</span>.cpp  <span class="comment"># 移除匹配的部分 /path/to/cool.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;STR##*.&#125;</span>     <span class="comment"># java 贪婪匹配(extension)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;STR##*/&#125;</span>     <span class="comment"># cool.java 贪婪匹配</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;STR#*/&#125;</span>      <span class="comment"># 非贪婪匹配 path/to/cool.java</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;STR/cool/cooler&#125;</span> <span class="comment"># 非贪婪替换 /path/to/cooler.java</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;STR//\//*&#125;</span> <span class="comment"># 贪婪替换，替换/为* *path*to*cooler.java</span></span><br></pre></td></tr></table></figure><p>大小写转换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">STR=<span class="string">"HELLO WORLD!"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;STR,&#125;</span>   <span class="comment">#=&gt; "hELLO WORLD!" (将第一个字母小写)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;STR,,&#125;</span>  <span class="comment">#=&gt; "hello world!" (所有小写)</span></span><br><span class="line"></span><br><span class="line">STR=<span class="string">"hello world!"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;STR^&#125;</span>   <span class="comment">#=&gt; "Hello world!" (将第一个字母大写)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;STR^^&#125;</span>  <span class="comment">#=&gt; "HELLO WORLD!" (所有大写)</span></span><br></pre></td></tr></table></figure><p>查找子字符串</p><p>查找字符 m 或 p 的位置(哪个字母先出现就计算哪个)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"I am super cool"</span></span><br><span class="line"><span class="built_in">echo</span> `expr index <span class="string">"<span class="variable">$string</span>"</span> mp`  <span class="comment"># 输出 4, 反引号</span></span><br></pre></td></tr></table></figure></p><p>字符串内使用反引号可执行command<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ wc -l &lt; /etc/group</span><br><span class="line">69</span><br><span class="line">timmger@timmger-virtual-machine:~$ <span class="built_in">echo</span> <span class="string">"there are `wc -l &lt; /etc/group` of lines in the /etc/group file"</span></span><br><span class="line">there are 69 of lines <span class="keyword">in</span> the /etc/group file</span><br><span class="line">timmger@timmger-virtual-machine:~$</span><br></pre></td></tr></table></figure></p><p>也可以赋值command为变量(反引号)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ num=`ls <span class="variable">$HOME</span> | wc -l`</span><br><span class="line">timmger@timmger-virtual-machine:~$ <span class="built_in">echo</span> <span class="variable">$num</span></span><br><span class="line">20</span><br><span class="line">timmger@timmger-virtual-machine:~$</span><br></pre></td></tr></table></figure><h3 id="3-参数（arguments）"><a href="#3-参数（arguments）" class="headerlink" title="3. 参数（arguments）"></a>3. 参数（arguments）</h3><blockquote><p><strong>\$0</strong> : 该脚本的文件名参数</p></blockquote><blockquote><p><strong>\$#</strong> : 脚本的参数数量</p></blockquote><blockquote><p><strong>\$1..\$n</strong> : 输入传递的第n个参数</p></blockquote><blockquote><p><strong>\$@</strong> : 从输入传递的所有参数</p></blockquote><p><code>cool.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:timmger</span></span><br><span class="line"><span class="comment"># url:blog.timmger.site</span></span><br><span class="line"></span><br><span class="line">filename=<span class="variable">$0</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"arguments are <span class="variable">$@</span>, the num is <span class="variable">$#</span>"</span></span><br></pre></td></tr></table></figure><p>执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ ./cool.sh arg1 arg2 arg3</span><br><span class="line">./cool.sh</span><br><span class="line">arguments are arg1 arg2 arg3, the num is 3</span><br></pre></td></tr></table></figure></p><h3 id="4-循环（loops）和-条件语句（Conditionals）"><a href="#4-循环（loops）和-条件语句（Conditionals）" class="headerlink" title="4. 循环（loops）和 条件语句（Conditionals）"></a>4. 循环（loops）和 条件语句（Conditionals）</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a><strong>if</strong>语句</h4><p>例句：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ping -c 1 google.com; <span class="keyword">then</span>  <span class="comment"># ping -c 1 要求服务器返回1次 </span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"It appears you have a working internet connection"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p><code>if.sh</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:timmger</span></span><br><span class="line"><span class="comment"># url:blog.timmger.site</span></span><br><span class="line"></span><br><span class="line">NAME=<span class="variable">$1</span></span><br><span class="line">COOL=<span class="string">"you are cool"</span></span><br><span class="line">COOLER=<span class="string">"you are cooler"</span></span><br><span class="line">COOLEST=<span class="string">"you are coolest"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$NAME</span>"</span> = <span class="string">"time"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$COOL</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">"<span class="variable">$NAME</span>"</span> = <span class="string">"manager"</span>]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$COOLER</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$COOLEST</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ ./if.sh time</span><br><span class="line">you are cool</span><br><span class="line">timmger@timmger-virtual-machine:~$ ./if.sh manager</span><br><span class="line">you are cooler</span><br><span class="line">timmger@timmger-virtual-machine:~$ ./if.sh timmger</span><br><span class="line">you are coolest</span><br><span class="line">timmger@timmger-virtual-machine:~$</span><br></pre></td></tr></table></figure></p><p><code>if2.sh</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:timmger</span></span><br><span class="line"><span class="comment"># url:blog.timmger.site</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$#</span> -lt NUM_REQ ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Not enough arguments, Call this script with</span></span><br><span class="line"><span class="string">    <span class="variable">$0</span> \&lt;name\&gt; \&lt;number\&gt;"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ ./if2.sh timmger</span><br><span class="line">Not enough arguments, Call this script with</span><br><span class="line">    ./if2.sh &lt;name&gt; &lt;number&gt;</span><br><span class="line">timmger@timmger-virtual-machine:~$</span><br></pre></td></tr></table></figure></p><p>[[ 用于 command/program 返回 0 (true) 或 1 (false). 见于条件语句。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Not NUll(-n) or Zero length(-z)</span></span><br><span class="line">string=<span class="string">""</span></span><br><span class="line"><span class="keyword">if</span> [[ -z <span class="string">"<span class="variable">$string</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"String is empty"</span></span><br><span class="line"><span class="keyword">elif</span> [[ -n <span class="string">"<span class="variable">$string</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"String is not empty"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[[ -z STRING ]]        <span class="comment"># Empty string</span></span><br><span class="line">[[ -n STRING ]]        <span class="comment"># Not empty string</span></span><br><span class="line">[[ STRING == STRING ]]<span class="comment"># Equal</span></span><br><span class="line">[[ STRING != STRING ]]<span class="comment"># Not Equal</span></span><br><span class="line">[[ NUM -eq NUM ]]<span class="comment"># Equal</span></span><br><span class="line">[[ NUM -ne NUM ]]<span class="comment"># Not equal</span></span><br><span class="line">[[ NUM -lt NUM ]]<span class="comment"># Less than</span></span><br><span class="line">[[ NUM -le NUM ]]<span class="comment"># Less than or equal</span></span><br><span class="line">[[ NUM -gt NUM ]]<span class="comment"># Greater than</span></span><br><span class="line">[[ NUM -ge NUM ]]<span class="comment"># Greater than or equal</span></span><br><span class="line">[[ STRING =~ STRING ]]<span class="comment"># 正则 Regexp</span></span><br><span class="line">(( NUM &lt; NUM ))        <span class="comment"># Numeric conditions</span></span><br><span class="line">[[ -o noclobber ]]<span class="comment"># If OPTIONNAME is enabled</span></span><br><span class="line">[[ ! EXPR ]]        <span class="comment"># Not</span></span><br><span class="line">[[ X ]] &amp;&amp; [[ Y ]]<span class="comment"># And</span></span><br><span class="line">[[ X ]] || [[ Y ]]</span><br></pre></td></tr></table></figure><p>字符串比较使用双括弧<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int1=<span class="string">"int"</span></span><br><span class="line">int2=<span class="string">"int"</span></span><br><span class="line"><span class="keyword">if</span> (( <span class="variable">$int1</span> == <span class="variable">$int2</span> )); <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$int1</span> is equal to <span class="variable">$int2</span>."</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a><strong>for</strong>循环</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印每个变量</span></span><br><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$arg</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印变量1到5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..5&#125;; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Welcome <span class="variable">$i</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 步长5打印</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;5..50..5&#125;; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Welcome <span class="variable">$i</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="类C循环"><a href="#类C循环" class="headerlink" title="类C循环"></a><strong>类C</strong>循环</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (( i = 0 ; i &lt; 100 ; i++ )); <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a><strong>while</strong>循环</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取文件的每一行</span></span><br><span class="line">&lt; file.txt | <span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$line</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 死循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="5-函数（Functions）"><a href="#5-函数（Functions）" class="headerlink" title="5. 函数（Functions）"></a>5. 函数（Functions）</h3><p><strong>定义函数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">myfunc</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"hello <span class="variable">$1</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同上</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">myfunc</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"hello <span class="variable">$1</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myfunc <span class="string">"world"</span></span><br></pre></td></tr></table></figure><p><strong>作为返回值传递</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">myfunc</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> myresult=<span class="string">'some value'</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$myresult</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result=<span class="string">"<span class="variable">$(myfunc)</span>"</span></span><br></pre></td></tr></table></figure><h3 id="6-数组"><a href="#6-数组" class="headerlink" title="6. 数组"></a>6. 数组</h3><p><strong>定义数组</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Fruits=(<span class="string">'Apple'</span> <span class="string">'Banana'</span> <span class="string">'Orange'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同上</span></span><br><span class="line">Fruits[0]=<span class="string">"Apple"</span></span><br><span class="line">Fruits[1]=<span class="string">"Banana"</span></span><br><span class="line">Fruits[2]=<span class="string">"Orange"</span></span><br></pre></td></tr></table></figure><p><strong>使用数组</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;Fruits[0]&#125;</span>           <span class="comment"># 返回index为0的元素</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;Fruits[@]&#125;</span>           <span class="comment"># 所有元素</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#Fruits[@]&#125;</span>          <span class="comment"># 元素的数量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#Fruits&#125;</span>             <span class="comment"># 第一个元素的字符串长度</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#Fruits[n]&#125;</span>          <span class="comment"># 第N个元素的字符串长度</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;Fruits[@]:3:2&#125;</span>       <span class="comment"># 范围 (from position 3, length 2)</span></span><br></pre></td></tr></table></figure><p><strong>数组操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Fruits=(<span class="string">"<span class="variable">$&#123;Fruits[@]&#125;</span>"</span> <span class="string">"Watermelon"</span>)    <span class="comment"># 添加watermelon到数组</span></span><br><span class="line">Fruits+=(<span class="string">'Watermelon'</span>)                  <span class="comment"># 添加</span></span><br><span class="line">Fruits=( <span class="variable">$&#123;Fruits[@]/Ap*/&#125;</span> )            <span class="comment"># 通过正则匹配移除Apple</span></span><br><span class="line"><span class="built_in">unset</span> Fruits[2]                         <span class="comment"># 指定index移除</span></span><br><span class="line">Fruits=(<span class="string">"<span class="variable">$&#123;Fruits[@]&#125;</span>"</span>)                 <span class="comment"># 复制</span></span><br><span class="line">Fruits=(<span class="string">"<span class="variable">$&#123;Fruits[@]&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;Veggies[@]&#125;</span>"</span>) <span class="comment"># 拼接</span></span><br><span class="line">lines=(`cat <span class="string">"logfile"</span>`)                 <span class="comment"># 从文件读取</span></span><br></pre></td></tr></table></figure><p><strong>字典</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">declare</span> -A sounds</span><br><span class="line">sounds[dog]=<span class="string">"bark"</span></span><br><span class="line">sounds[cow]=<span class="string">"moo"</span></span><br><span class="line">sounds[bird]=<span class="string">"tweet"</span></span><br><span class="line">sounds[wolf]=<span class="string">"howl"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;sounds[dog]&#125;</span> <span class="comment"># 返回 bark</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;sounds[@]&#125;</span>   <span class="comment"># 返回所有值</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!sounds[@]&#125;</span>  <span class="comment"># 返回所有键</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#sounds[@]&#125;</span>  <span class="comment"># 所有值的数量</span></span><br><span class="line"><span class="built_in">unset</span> sounds[dog]   <span class="comment"># 删除 dog</span></span><br></pre></td></tr></table></figure></p><h3 id="7-其他"><a href="#7-其他" class="headerlink" title="7. 其他"></a>7. 其他</h3><p><strong>条件执行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit &amp;&amp; git push</span><br><span class="line">git commit || <span class="built_in">echo</span> <span class="string">"Commit failed"</span></span><br></pre></td></tr></table></figure><p><strong>注释</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#---------------------------</span></span><br><span class="line"><span class="comment"># 单行注释</span></span><br><span class="line"><span class="comment"># author: timmger</span></span><br><span class="line"><span class="comment"># date: 2019/9/19</span></span><br><span class="line"><span class="comment">#---------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">：&lt;&lt;‘</span><br><span class="line">This is a</span><br><span class="line">muti line</span><br><span class="line">comment</span><br><span class="line">’</span><br></pre></td></tr></table></figure><p><strong>读取输入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -n <span class="string">"Proceed? [y/n]: "</span> ans</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$ans</span></span><br></pre></td></tr></table></figure><p><strong>特殊变量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$?<span class="comment"># 从最后一个任务退出</span></span><br><span class="line">$!<span class="comment"># 最后一个后台任务的 PID </span></span><br><span class="line">$$<span class="comment"># shell 的 PID</span></span><br></pre></td></tr></table></figure><p><strong>添加PATH环境</strong></p><blockquote><p><strong>PATH=\$PATH:/path/to</strong></p></blockquote><p><strong>交互式脚本</strong></p><blockquote><p><strong>script filename</strong> : 可实时编辑脚本<br><strong>CTRL D</strong> 退出</p></blockquote><p>自动化脚本</p><blockquote><p><strong>script myscript.log –timing=time.log</strong><br><strong>command1</strong><br><strong>command2</strong><br><strong>scriptreplay -s myscript.log –timing=time.log</strong><br>自动执行command1和command2</p></blockquote><p><br></p><p><strong>参考资料</strong>：</p><ol><li><a href="https://devhints.io/bash" target="_blank" rel="noopener">https://devhints.io/bash</a></li><li><a href="https://blog.timmger.site/2019/09/15/%E3%80%8A%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E2%80%94%E2%80%94%E2%80%94%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8DLinux-Sysadmin%E3%80%8B-%E4%BA%8C/" target="_blank" rel="noopener">https://blog.timmger.site/2019/09/15/%E3%80%8A%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E2%80%94%E2%80%94%E2%80%94%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8DLinux-Sysadmin%E3%80%8B-%E4%BA%8C/</a></li><li><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-command-manual.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Bash脚本编程入门&quot;&gt;&lt;a href=&quot;#Bash脚本编程入门&quot; class=&quot;headerlink&quot; title=&quot;Bash脚本编程入门&quot;&gt;&lt;/a&gt;Bash脚本编程入门&lt;/h2&gt;&lt;h3 id=&quot;1-一个bash脚本&quot;&gt;&lt;a href=&quot;#1-一个bash脚本&quot;
      
    
    </summary>
    
      <category term="Linux" scheme="https://timmger.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://timmger.github.io/tags/Linux/"/>
    
      <category term="Bash" scheme="https://timmger.github.io/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title>《从零到一——成为一名Linux Sysadmin》- tmux和tar命令</title>
    <link href="https://timmger.github.io/2019/09/18/%E3%80%8A%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E2%80%94%E2%80%94%E2%80%94%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8DLinux-Sysadmin%E3%80%8B-%E5%9B%9B/"/>
    <id>https://timmger.github.io/2019/09/18/《从零到一———成为一名Linux-Sysadmin》-四/</id>
    <published>2019-09-18T00:34:09.000Z</published>
    <updated>2019-09-21T12:14:21.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-tmux快速入门"><a href="#1-tmux快速入门" class="headerlink" title="1. tmux快速入门"></a>1. tmux快速入门</h2><h3 id="1-1-什么是tmux"><a href="#1-1-什么是tmux" class="headerlink" title="1.1 什么是tmux"></a>1.1 什么是tmux</h3><p>tmux是一款终端复用(<em>terminal multiplexer</em>)工具。通过tmux，在一个终端内，你可以打开多个窗口并能够再次切分成多个窗格（“panes”），每个窗格都可以独立地运行指令。<br>所有的窗口和窗格都包含在一个session（会话）里面，你可以在任何时间退出session，称为<code>detaching</code>，tmux会一直维持会话直到你退出tmux服务器（当你重启的时候），所以之后的任意时间，你都可以重新“attaching”到session，来建立连接。<br>这在你使用远程服务器或树莓派时非常有用，当你丢失ssh连接时，tmux session以及后台所有的进程会一直维持运行。<br><img src="https://i.loli.net/2019/09/18/kFNMRsGBALYXHQZ.png" alt="tmux.png"></p><h3 id="1-2-常用指令以及快捷键"><a href="#1-2-常用指令以及快捷键" class="headerlink" title="1.2 常用指令以及快捷键"></a>1.2 常用指令以及快捷键</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>Ubuntu：  </p><blockquote><p><strong>sudo apt-get install tmux</strong></p></blockquote><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><blockquote><p><strong>tmux</strong></p></blockquote><p><img src="https://i.loli.net/2019/09/18/DB1w28MIdXKqhPj.png" alt="Snipaste_2019-09-18_16-20-45.png"></p><h4 id="拆分窗格"><a href="#拆分窗格" class="headerlink" title="拆分窗格"></a>拆分窗格</h4><p>tmux中所有指令都由一个前缀键触发：<code>C-b</code>(同时按住Ctrl和b键)</p><blockquote><p><strong>C-b  %</strong>: 纵向切分，同时按住Ctrl和b键后，释放，再按%</p></blockquote><blockquote><p><strong>C-b “</strong>: 横向切分</p></blockquote><p><img src="https://i.loli.net/2019/09/18/IeyouQibAnr4DTB.png" alt="Snipaste_2019-09-18_16-48-35.png"></p><h4 id="切换窗格"><a href="#切换窗格" class="headerlink" title="切换窗格"></a>切换窗格</h4><blockquote><p><strong>C-b \&lt;箭头键></strong>：使用方向键左右上下移动</p></blockquote><h4 id="关闭窗格"><a href="#关闭窗格" class="headerlink" title="关闭窗格"></a>关闭窗格</h4><blockquote><p><strong>C-d</strong> 或者 <strong>exit</strong></p></blockquote><h4 id="创建窗口"><a href="#创建窗口" class="headerlink" title="创建窗口"></a>创建窗口</h4><blockquote><p><strong>C-b c</strong>: 新窗口会显示在状态栏上</p></blockquote><p><img src="https://i.loli.net/2019/09/18/tTm8njsxACWJa7G.png" alt="Snipaste_2019-09-18_17-28-45.png"></p><blockquote><p><strong>C-b p</strong>: 切换到上一个窗口<br><strong>C-b n</strong>: 切换到下一个窗口<br><strong>C-b \&lt;number></strong>: 切换到指定窗口（显示在状态栏上窗口名前的数字）<br><strong>C-b ,</strong>: 重命名窗口</p></blockquote><h4 id="会话处理"><a href="#会话处理" class="headerlink" title="会话处理"></a>会话处理</h4><blockquote><p><strong>C-b d</strong>: detach当前的session<br><strong>C-b D</strong>: 选择你想退出的session</p></blockquote><p>重连(re-attach)</p><blockquote><p><strong>tmux ls</strong>: 列出正在运行的session</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ tmux ls</span><br><span class="line">0: 2 windows (created Wed Sep 18 08:50:40 2019) [80x20]</span><br><span class="line">timmger@timmger-virtual-machine:~$</span><br></pre></td></tr></table></figure><blockquote><p><strong>tmux attach -t 0</strong>: 连接到指定(-t 0 指定第一个)的session</p></blockquote><blockquote><p><strong>tmux new -s cat</strong>: 命名并创建一个名为“cat”的session</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ tmux new -s cat</span><br><span class="line">[detached]</span><br><span class="line">timmger@timmger-virtual-machine:~$ tmux ls</span><br><span class="line">0: 2 windows (created Wed Sep 18 08:50:40 2019) [80x20]</span><br><span class="line">cat: 1 windows (created Wed Sep 18 17:47:46 2019) [80x20]</span><br><span class="line">timmger@timmger-virtual-machine:~$</span><br></pre></td></tr></table></figure><blockquote><p><strong>tmux rename-session -t 0 cute</strong>: 重命名已存在的session</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ tmux rename-session -t 0 cute</span><br><span class="line">timmger@timmger-virtual-machine:~$ tmux ls</span><br><span class="line">cat: 1 windows (created Wed Sep 18 17:47:46 2019) [80x20]</span><br><span class="line">cute: 2 windows (created Wed Sep 18 08:50:40 2019) [80x20]</span><br><span class="line">timmger@timmger-virtual-machine:~$</span><br></pre></td></tr></table></figure><h4 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h4><p>使用 <code>C-b ?</code> 来查看更多可用的命令。</p><blockquote><p><strong>C-b z</strong>: 使一个窗格全屏，再次按可缩小<br><strong>C-b C-&lt;箭头键&gt;</strong>：指定方向改变窗格大小</p></blockquote><p>在同一个窗口分成左右pane，再分别连接到服务器，在服务器创建一个session，左右attach到同一个会话，可同步显示。</p><h2 id="2-存档和压缩-tar"><a href="#2-存档和压缩-tar" class="headerlink" title="2. 存档和压缩(tar)"></a>2. 存档和压缩(tar)</h2><p><strong>tar</strong> 命令通常用于创建，还原 tar.gz 或者 .tgz 存档文件，可实现解压或压缩。</p><h3 id="压缩一个文件夹或文件"><a href="#压缩一个文件夹或文件" class="headerlink" title="压缩一个文件夹或文件"></a>压缩一个文件夹或文件</h3><blockquote><p><strong>atr -czvf name-of-archive.tar.gz /path/to/directory-or-file</strong></p></blockquote><ul><li><strong>-c</strong> : 创建一个存档</li><li><strong>-z</strong> : 使用gzip压缩该存档</li><li><strong>-v</strong> : 显示创建存档的过程，称为“verbose”模式</li><li><strong>-f</strong> : 允许你指定存档的文件名</li></ul><h3 id="一次性压缩多个目录或文件"><a href="#一次性压缩多个目录或文件" class="headerlink" title="一次性压缩多个目录或文件"></a>一次性压缩多个目录或文件</h3><blockquote><p><strong>tar -czvf archive.tar.gz /home/ubuntu/Downloads /usr/local/stuff /home/ubuntu/Documents/notes.txt</strong></p></blockquote><h3 id="排除某个文件夹或文件"><a href="#排除某个文件夹或文件" class="headerlink" title="排除某个文件夹或文件"></a>排除某个文件夹或文件</h3><p>通过附加 <code>--exclude</code> 加文件夹或文件来过滤</p><blockquote><p><strong>tar -czvf archive.tar.gz /home/ubuntu –exclude=/home/ubuntu/Downloads –exclude=/home/ubuntu/.cache</strong> : 排除/home/ubuntu/Downloads 和 /home/ubuntu/.cache</p></blockquote><p>–exclude 可添加patterns匹配相关文件</p><blockquote><p><strong>tar -czvf archive.tar.gz /home/ubuntu –exclude=*.mp3</strong>: 排除/home/ubuntu下的所有MP3文件</p></blockquote><h3 id="使用bzip2压缩代替"><a href="#使用bzip2压缩代替" class="headerlink" title="使用bzip2压缩代替"></a>使用bzip2压缩代替</h3><p>gzip压缩更快，但压缩量较小，对于大文件，为了更高的压缩率，可使用bzip2压缩</p><blockquote><p><strong>tar -czjf archive.tar.bz2 stuff</strong></p></blockquote><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><blockquote><p><strong>tar -xzvf archive.tar.gz</strong> : 解压archive.tar.gz存档</p></blockquote><p>也可指定到一个目录</p><blockquote><p><strong>tar -xzvf archive.tar.gz -C /tmp</strong> : 解压archive.tar.gz存档到/tmp</p></blockquote><p><br></p><p><strong>参考文章</strong>：</p><ol><li><a href="https://www.howtogeek.com/248780/how-to-compress-and-extract-files-using-the-tar-command-on-linux/" target="_blank" rel="noopener">https://www.howtogeek.com/248780/how-to-compress-and-extract-files-using-the-tar-command-on-linux/</a></li><li><a href="https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/" target="_blank" rel="noopener">https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/</a></li><li><a href="https://www.runoob.com/linux/linux-comm-tar.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-comm-tar.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-tmux快速入门&quot;&gt;&lt;a href=&quot;#1-tmux快速入门&quot; class=&quot;headerlink&quot; title=&quot;1. tmux快速入门&quot;&gt;&lt;/a&gt;1. tmux快速入门&lt;/h2&gt;&lt;h3 id=&quot;1-1-什么是tmux&quot;&gt;&lt;a href=&quot;#1-1-什么是t
      
    
    </summary>
    
      <category term="Linux" scheme="https://timmger.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://timmger.github.io/tags/Linux/"/>
    
      <category term="tmux" scheme="https://timmger.github.io/tags/tmux/"/>
    
      <category term="tar" scheme="https://timmger.github.io/tags/tar/"/>
    
  </entry>
  
  <entry>
    <title>《从零到一——成为一名Linux Sysadmin》- 进程和文件系统</title>
    <link href="https://timmger.github.io/2019/09/16/%E3%80%8A%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E2%80%94%E2%80%94%E2%80%94%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8DLinux-Sysadmin%E3%80%8B-%E4%B8%89/"/>
    <id>https://timmger.github.io/2019/09/16/《从零到一———成为一名Linux-Sysadmin》-三/</id>
    <published>2019-09-16T09:01:35.000Z</published>
    <updated>2019-09-21T12:13:12.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-进程管理"><a href="#1-进程管理" class="headerlink" title="1. 进程管理"></a>1. 进程管理</h2><p>Linux terminal 有一系列关于进程有用的指令，例如显示正在运行的进程，kill它们，或者改变它们的优先级，本节列举一些常用的指令。</p><h3 id="top"><a href="#top" class="headerlink" title="top"></a><strong>top</strong></h3><p>top是最传统的指令，它用来查看系统的资源使用和占用最多系统资源的进程，列表按照CPU占用百分比排序。CTRL C退出。<br><img src="https://i.loli.net/2019/09/16/uRlqCtwj5Go1cmD.png" alt="Snipaste_2019-09-16_17-16-51.png"></p><h3 id="htop"><a href="#htop" class="headerlink" title="htop"></a><strong>htop</strong></h3><p>htop相比top，拥有更易于理解的显示界面，它还允许你使用方向键选择进程并执行一些操作，例如kill(F9),改变优先级(F7,F8)等。</p><p><img src="https://i.loli.net/2019/09/16/83mlz61TGhO7IAa.png" alt="Snipaste_2019-09-16_17-21-36.png"></p><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a><strong>ps</strong></h3><p>ps指令列出正在运行进程</p><blockquote><p><strong>ps -A | grep firefox</strong>: 列出运行的firefox程序</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@timmger-virtual-machine:~# ps -A | grep firefox</span><br><span class="line">  5173 ?        00:00:04 firefox</span><br><span class="line">root@timmger-virtual-machine:~#</span><br></pre></td></tr></table></figure><h3 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a><strong>pstree</strong></h3><p>使用树结构来显示进程</p><p><img src="https://i.loli.net/2019/09/16/ICmUaOjNEAzHBSZ.png" alt="Snipaste_2019-09-16_17-34-42.png"></p><h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a><strong>kill</strong></h3><p>kill指令可以指定进程ID杀死进程，kill可以指定SIGNAL编号（例如 <strong>-9</strong> 强制杀死）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@timmger-virtual-machine:~<span class="comment"># ps aux | grep firefox</span></span><br><span class="line">timmger    5240 13.0  8.3 783776 170012 ?       Sl   17:37   0:03 /usr/lib/firefox/firefox</span><br><span class="line">root       5287  0.0  0.1  13680  2128 pts/6    S+   17:38   0:00 grep --color=auto firefox</span><br><span class="line">root@timmger-virtual-machine:~<span class="comment"># kill 5240</span></span><br><span class="line">root@timmger-virtual-machine:~<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><h3 id="pgrep"><a href="#pgrep" class="headerlink" title="pgrep"></a><strong>pgrep</strong></h3><p>pgrep可以返回指定进程的匹配的ID</p><blockquote><p><strong>pgrep firefox | kill</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@timmger-virtual-machine:~<span class="comment"># pgrep firefox</span></span><br><span class="line">5289</span><br><span class="line">root@timmger-virtual-machine:~<span class="comment"># kill $(pgrep firefox)</span></span><br><span class="line">root@timmger-virtual-machine:~<span class="comment"># pkill firefox</span></span><br><span class="line">root@timmger-virtual-machine:~<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>使用pkill更简单</p><h3 id="pkill-amp-killall"><a href="#pkill-amp-killall" class="headerlink" title="pkill &amp; killall"></a><strong>pkill &amp; killall</strong></h3><p>指定进程名杀死</p><blockquote><p><strong>pkill firefox</strong><br><strong>killall firefox</strong></p></blockquote><h3 id="renice"><a href="#renice" class="headerlink" title="renice"></a><strong>renice</strong></h3><p>renice命令用于重新指定一个或多个进程的优先序，-20（最高优先序）到 19（最低优先序），0 是默认优先序。</p><blockquote><p><strong>renice 19 PID</strong></p></blockquote><h3 id="xkill"><a href="#xkill" class="headerlink" title="xkill"></a><strong>xkill</strong></h3><p>xkill可以杀死指定任意图形程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@timmger-virtual-machine:~<span class="comment"># xkill</span></span><br><span class="line">Select the window whose client you wish to <span class="built_in">kill</span> with button 1....</span><br></pre></td></tr></table></figure><h2 id="2-Linux文件系统"><a href="#2-Linux文件系统" class="headerlink" title="2. Linux文件系统"></a>2. Linux文件系统</h2><h3 id="2-1-什么是日志-Journaling"><a href="#2-1-什么是日志-Journaling" class="headerlink" title="2.1 什么是日志(Journaling)"></a>2.1 什么是日志(Journaling)</h3><p>Journaling被设计用来防止由于内核崩溃或断电导致的数据损坏，通过日志，你的电脑在向磁盘写入文件时，先把相关信息写入日志区域，文件写入之后，再从日志中移除，如果中途断电，linux会检查系统的日志文件，在启动时恢复已部分完成的工作。<br>文件不会整个写入日志中，而是记录文件metadata，索引节点和磁盘位置，但也会降低磁盘写入的性能。</p><p><img src="https://i.loli.net/2019/09/17/jl8zEy2fgeLG3dW.png" alt="img_58af43716360e.png.pagespeed.ce.zPapbz0ylw.png"></p><center>图片来自howtogeek</center><h3 id="2-2-Linux文件系统类型"><a href="#2-2-Linux文件系统类型" class="headerlink" title="2.2 Linux文件系统类型"></a>2.2 Linux文件系统类型</h3><p><strong>Ext</strong>: “Extended file system”, 是第一版Linux文件系统，由于局限性，目前已不再使用。<br><br><strong>Ext2</strong>: 不是日志文件系统，第一个支持扩展文件属性和2TB驱动器的系统，没有日志意味着写入磁盘次数更少，适用于类似USB的闪存存储。<br><br><strong>Ext3</strong>: 基于Ext2增加了日志功能，并向后兼容Ext2，<br><br><strong>Ext4</strong>: 仍然向后兼容，你可以将Ext4文件系统挂载为Ext3, 或者挂载Ext2和Ext3为Ext4. 加入了一些新特性，如减少文件碎片，支持更大的卷和文件，并且使用延迟分配改善内存寿命，是最流行的Linux发行版文件系统类型。<br><br><strong>BtrFS</strong>: 由Oracle研发，”Better” or “Butter” FS, 全称“B-Tree File System”, 支持驱动器池，即时快照，透明压缩，和在线碎片整理。它被设计为Ext系列的代替。<br><br><strong>ReiserFS</strong>: 由Sun公司研发（现属Oracle），ZFS支持许多高级特性，包括驱动器池，快照，和动态磁盘分段。<br><br><strong>XFS</strong>: 较老的文件系统，对小型文件运行较慢<br><br><strong>JFS</strong>: 即日志文件系统，由IBM研发，它拥有较低的CPU使用率和对大文件、小文件的良好性能。</p><h3 id="2-3-Linux目录结构"><a href="#2-3-Linux目录结构" class="headerlink" title="2.3 Linux目录结构"></a>2.3 Linux目录结构</h3><p>linux 是树状目录结构</p><blockquote><p><strong>/</strong>:  The Root Directory</p></blockquote><blockquote><p><strong>/bin</strong>:  Essential User Binaries, 存放最常用的指令，如 <strong>ls</strong>，<strong>mv</strong></p></blockquote><blockquote><p><strong>/boot</strong>:  Static Boot Files, boot loader 和 boot files所在的位置</p></blockquote><blockquote><p><strong>/dev</strong>: Device Files, 包含像 USBs DVDs 挂载的物理驱动器，以及一些虚拟设备的文件夹。</p></blockquote><blockquote><p><strong>/etc</strong>: Configuration Files, 包含安装包的配置文件</p></blockquote><blockquote><p><strong>/home</strong>: Home Folders, 包含每个用户</p></blockquote><blockquote><p><strong>/lib</strong>: Essential Shared Libraries, 安装包的库所在的位置</p></blockquote><blockquote><p><strong>/lost+found</strong>: 存放损坏的文件，在下一次启动时恢复。</p></blockquote><blockquote><p><strong>/media</strong>: 当移动媒体设备挂载时，/media文件夹就会自动创建一个子文件夹</p></blockquote><blockquote><p><strong>/mnt</strong>: Temporary Mount Points, 系统管理员安装暂时文件系统的位置，您可能会找到您安装的USB或DVD。</p></blockquote><blockquote><p><strong>/opt</strong>: 包含一些可选的包并由包管理器接管</p></blockquote><blockquote><p><strong>/proc</strong>: 该文件夹包含系统正在运行的进程，你可以看到当前进程的许多信息</p></blockquote><blockquote><p><strong>/root</strong>: root用户的home文件夹</p></blockquote><blockquote><p><strong>/sbin</strong>: 同/bin. 但仅为root用户可访问</p></blockquote><blockquote><p><strong>/tmp</strong>: 包含暂时的文件</p></blockquote><blockquote><p><strong>/usr</strong>： 包含用户之间共享的程序或文件</p></blockquote><blockquote><p><strong>/var</strong>: 包含一些log文件和变量数据</p></blockquote><p><br></p><p><strong>参考文章</strong>：</p><ol><li><a href="https://likegeeks.com/linux-file-system/" target="_blank" rel="noopener">https://likegeeks.com/linux-file-system/</a></li><li><a href="https://www.howtogeek.com/117435/htg-explains-the-linux-directory-structure-explained/" target="_blank" rel="noopener">https://www.howtogeek.com/117435/htg-explains-the-linux-directory-structure-explained/</a></li><li><a href="https://www.runoob.com/linux/linux-system-contents.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-system-contents.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-进程管理&quot;&gt;&lt;a href=&quot;#1-进程管理&quot; class=&quot;headerlink&quot; title=&quot;1. 进程管理&quot;&gt;&lt;/a&gt;1. 进程管理&lt;/h2&gt;&lt;p&gt;Linux terminal 有一系列关于进程有用的指令，例如显示正在运行的进程，kill它们，或者改变
      
    
    </summary>
    
      <category term="Linux" scheme="https://timmger.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://timmger.github.io/tags/Linux/"/>
    
      <category term="进程" scheme="https://timmger.github.io/tags/%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="文件系统" scheme="https://timmger.github.io/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>《从零到一——成为一名Linux Sysadmin》- Shell</title>
    <link href="https://timmger.github.io/2019/09/15/%E3%80%8A%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E2%80%94%E2%80%94%E2%80%94%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8DLinux-Sysadmin%E3%80%8B-%E4%BA%8C/"/>
    <id>https://timmger.github.io/2019/09/15/《从零到一———成为一名Linux-Sysadmin》-二/</id>
    <published>2019-09-15T02:42:54.000Z</published>
    <updated>2019-09-21T12:11:47.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Shell"><a href="#1-Shell" class="headerlink" title="1. Shell"></a>1. Shell</h2><h3 id="1-1-什么是Shell脚本"><a href="#1-1-什么是Shell脚本" class="headerlink" title="1.1 什么是Shell脚本"></a>1.1 什么是Shell脚本</h3><p><a href="https://en.wikipedia.org/wiki/Shell_script" target="_blank" rel="noopener">维基</a>的解释是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A shell script is a computer program designed to be run by the Unix shell, a command-line interpreter.The various dialects of shell scripts are considered to be scripting languages. Typical operations performed by shell scripts include file manipulation, program execution, and printing text.</span><br></pre></td></tr></table></figure></p><p>shell脚本是被设计用来运行在Unix shell上的程序，它是一个命令行解释器。各种shell脚本方言都被认定为shell语言。典型的shell脚本操作包括：文件操作、执行程序和打印文本。<br>bash是最常用的一种shell。</p><h3 id="1-2-Pipes-and-Redirection-管道和重定向"><a href="#1-2-Pipes-and-Redirection-管道和重定向" class="headerlink" title="1.2 Pipes and Redirection(管道和重定向)"></a>1.2 Pipes and Redirection(管道和重定向)</h3><h4 id="1-2-1-重定向"><a href="#1-2-1-重定向" class="headerlink" title="1.2.1 重定向"></a>1.2.1 重定向</h4><p>输出重定向：</p><blockquote><p><strong>command &gt; file</strong>: 执行command并将输出存入file<br><strong>echo “I am cool” &gt; cool.txt</strong></p></blockquote><p>如果文件已存在，就会覆盖原来的内容<br><img src="https://i.loli.net/2019/09/15/OHs6Cmt37IjLzax.png" alt="Snipaste_2019-09-15_15-48-31.png"></p><blockquote><p><strong>echo “I am cooler” &gt;&gt; cool.txt</strong>: 将指令的输出追加到末尾</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ <span class="built_in">echo</span> <span class="string">"I am cooler"</span> &gt;&gt; cool.txt</span><br><span class="line">timmger@timmger-virtual-machine:~$ cat cool.txt</span><br><span class="line">I am cool</span><br><span class="line">I am cooler</span><br><span class="line">timmger@timmger-virtual-machine:~$</span><br></pre></td></tr></table></figure><p>输入重定向：</p><blockquote><p><strong>command &lt; file</strong>: 从键盘输入的命令会转入到文件内容<br><strong>wc -l &lt; cool.txt &gt; coolline</strong>： 将cool.txt的行数输出到coolline.txt</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ wc -l &lt; cool.txt &gt; coolline.txt</span><br><span class="line">timmger@timmger-virtual-machine:~$ cat coolline.txt </span><br><span class="line">2</span><br><span class="line">timmger@timmger-virtual-machine:~$</span><br></pre></td></tr></table></figure><p>将输入重定向到一个交互式 Shell 脚本或程序</p><blockquote><p>#!/bin/bash<br># author:timmger<br># url:blog.timmger.site<br><br><br>cat &lt;&lt; EOF<br>    I am cool<br>    I am cooler<br>    I am coolest<br>EOF</p></blockquote><p><img src="https://i.loli.net/2019/09/15/la8OsZI2SbQMuGA.png" alt="Snipaste_2019-09-15_20-31-33.png"></p><p><strong><code>File descriptor</code></strong><br>0 代表 <strong>standard input</strong><br>1 代表 <strong>standard output</strong><br>2 代表 <strong>standard error output</strong></p><p>通过使用 <strong>2&gt;</strong> 操作符，可阻止错误信息输出到屏幕</p><blockquote><p><strong>kill -HUP 1234 &gt;killout.txt 2&gt;killerr.txt</strong>: 将输出和错误信息放到不同的文件中  </p></blockquote><p><br></p><h4 id="1-2-2-管道"><a href="#1-2-2-管道" class="headerlink" title="1.2.2 管道"></a>1.2.2 管道</h4><p>你可以使用 <strong>pipe operator ( | )</strong> 来连接进程。不同于MS-DOS, 在Linux里，管道连接的进程会同时运行并且当有数据在其中使用时，会自动重新分配。举个简单的例子，你可以使用 <strong>sort</strong> 命令来排序 <strong>ps</strong> 的输出。</p><blockquote><p><strong>ps | sort &gt; pssort.txt</strong> : sort作用于ps的输出，sort的输出保存在passort.out中<br><strong>ps | sort | more</strong> : 与 <strong>more</strong> 或 <strong>less</strong> 连接用于分页显示</p></blockquote><blockquote><p><strong>ps -aux root | sort | uniq | grep -v sh | more</strong> :<br>ps -aux(显示所有包含其他使用者的进程)root的输出被送给sort指令<br>uniq用于去掉重复的东西<br>grep -v sh 移除叫sh的进程.</p></blockquote><p><br></p><h3 id="1-2-基本运算符"><a href="#1-2-基本运算符" class="headerlink" title="1.2 基本运算符"></a>1.2 基本运算符</h3><blockquote><p><strong><code>算数运算符</code></strong>:<br>+ - * / %<br><strong>`expr \$a + \$b`</strong>: expr 是一款表达式计算工具，使用它能完成表达式的求值操作<br><br>=(赋值) == (相等)  !=（不相等）<br><strong>[ \$a != \$b ]</strong>: 返回true或false(注意空格)</p></blockquote><p><br></p><blockquote><p><strong><code>关系运算符</code></strong>：<br><strong>-eq</strong>: 检测两个数是否相等，相等返回 true。<br><strong>-ne</strong>: 检测两个数是否不相等，不相等返回 true。<br><strong>-gt</strong>: 检测左边的数是否大于右边的，如果是，则返回 true。<br><strong>-lt</strong>: 检测左边的数是否小于右边的，如果是，则返回 true。<br><strong>-ge</strong>: 检测左边的数是否大于等于右边的，如果是，则返回 true。<br><strong>-le</strong>: 检测左边的数是否小于等于右边的，如果是，则返回 true。<br><strong>[ \$a -eq \$b ]</strong>: 返回true或false</p></blockquote><p><br></p><blockquote><p><strong><code>布尔运算符</code></strong>：<br><strong>！</strong>：非<br><strong>-o</strong> ：或<br><strong>-a</strong> : 与</p></blockquote><p>假设 a = 10, b = 20</p><blockquote><p><strong>[ \$a -lt 20 -o \$b -gt 100 ]</strong> : 返回true</p></blockquote><p><br></p><blockquote><p><strong><code>逻辑运算符</code></strong>：<br><strong>&amp;&amp;</strong>：AND<br><strong>[[ \$a -lt 100 &amp;&amp; \$b -gt 100 ]]</strong> : 返回false<br><strong>||</strong> ：OR<br><strong>[[ \$a -lt 100 || \$b -gt 100 ]]</strong> ：返回 true</p></blockquote><p><br></p><blockquote><p><strong><code>字符串运算符</code></strong>：<br><strong>！</strong>：非<br><strong>-o</strong> ：或<br><strong>-a</strong> : 与<br><strong>[ \$a -lt 20 -o \$b -gt 100 ]</strong> 返回 true。</p></blockquote><p><br></p><h3 id="1-3-过滤和查找"><a href="#1-3-过滤和查找" class="headerlink" title="1.3 过滤和查找"></a>1.3 过滤和查找</h3><blockquote><p><strong>cut</strong>: 从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。<br><strong>-d</strong>: 自定义分隔符，默认为制表符。<br><strong>-f</strong> ：与-d一起使用，指定显示哪个区域。  </p></blockquote><blockquote><p><strong>cat file.txt | cut -d: -f2</strong></p></blockquote><p><img src="https://i.loli.net/2019/09/16/GARE4eszPQl3niW.png" alt="Snipaste_2019-09-16_08-23-58.png"></p><p><br></p><blockquote><p><strong>sort</strong>: 将文本内容排序<br>-b 忽略每行前面开始出的空格字符<br>-f 排序时，将小写字母视为大写字母</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ cat file.txt | sort -bf</span><br><span class="line">age:22</span><br><span class="line">name:timmger</span><br><span class="line">timmger@timmger-virtual-machine:~$</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p><strong>uniq</strong>: 去重</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ cat file.txt</span><br><span class="line">name:timmger</span><br><span class="line">age:22</span><br><span class="line">age:22</span><br><span class="line">timmger@timmger-virtual-machine:~$ cat file.txt | uniq</span><br><span class="line">name:timmger</span><br><span class="line">age:22</span><br><span class="line">timmger@timmger-virtual-machine:~$</span><br></pre></td></tr></table></figure><blockquote><p><strong>wc</strong>: 计算指定文件的行数、字数，以及字节数</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ wc file.txt </span><br><span class="line"> 3  3 27 file.txt</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p><strong>grep</strong> : 用于查找文件里符合条件的字符串<br>-o 或 –only-matching : 只显示匹配 PATTERN 部分。</p></blockquote><blockquote><p><strong>cat file.txt | grep -o age</strong> </p></blockquote><p><img src="https://i.loli.net/2019/09/16/yP3Mvr4HSBKVJpc.png" alt="Snipaste_2019-09-16_08-59-44.png"></p><blockquote><p><strong>grep age file.txt | uniq | cut -d: -f2</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ grep age file.txt | uniq | cut -d: -f2</span><br><span class="line">22</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/09/16/yJOtVZLM1R8HaAY.png" alt="Snipaste_2019-09-16_15-59-45.png"></p><p><br></p><p><strong>参考文章</strong>  </p><ol><li><a href="https://www.cnblogs.com/butterflybay/p/10347937.html" target="_blank" rel="noopener">https://www.cnblogs.com/butterflybay/p/10347937.html</a></li><li><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-command-manual.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Shell&quot;&gt;&lt;a href=&quot;#1-Shell&quot; class=&quot;headerlink&quot; title=&quot;1. Shell&quot;&gt;&lt;/a&gt;1. Shell&lt;/h2&gt;&lt;h3 id=&quot;1-1-什么是Shell脚本&quot;&gt;&lt;a href=&quot;#1-1-什么是Shell脚本&quot; c
      
    
    </summary>
    
      <category term="Linux" scheme="https://timmger.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://timmger.github.io/tags/Linux/"/>
    
      <category term="Shell" scheme="https://timmger.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>《从零到一——成为一名Linux Sysadmin》- Linux命令</title>
    <link href="https://timmger.github.io/2019/09/13/%E3%80%8A%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E2%80%94%E2%80%94%E2%80%94%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8DLinux-Sysadmin%E3%80%8B-%E4%B8%80/"/>
    <id>https://timmger.github.io/2019/09/13/《从零到一———成为一名Linux-Sysadmin》-一/</id>
    <published>2019-09-13T15:30:40.000Z</published>
    <updated>2019-09-21T12:15:44.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是Linux"><a href="#1-什么是Linux" class="headerlink" title="1. 什么是Linux"></a>1. 什么是<em>Linux</em></h2><p><a href="https://en.wikipedia.org/wiki/Linux" target="_blank" rel="noopener">wikipedia</a> 给出的定义是：</p><pre><code>Linux is a family of open source Unix-like operating systems based on the Linux kernel, an operating system kernel first released on September 17, 1991, by Linus Torvalds.</code></pre><blockquote><p><strong><em>Linux</em></strong> 是一系列基于Linux内核的开源的类UNIX操作系统，该操作系统的内核是由Linus Torvalds于1991年9月17号首次发布。</p></blockquote><p>Linux的诞生距今不过二十余年，但它却遍布各类<strong>服务器</strong>、<strong>超算</strong>以及<strong>嵌入式设备</strong>(手机、路由器、电视等)，在三大主流系统中稳占一席。而它的创始人Linus Torvalds更是一位传奇人物。</p><p><img src="https://i.loli.net/2019/09/14/6vs4BogiVpqUEXx.jpg" alt="005zmjV2ly1g6yreqc1ovj30hs09z0yd.jpg"></p><center>Nvidia, F**K YOU!!!</center><h2 id="2-安装与配置"><a href="#2-安装与配置" class="headerlink" title="2. 安装与配置"></a>2. 安装与配置</h2><p>本文使用的是<strong>Linux发行版</strong> <code>Ubuntu 16.1</code>, 在<a href="https://ubuntu.com/index_kylin" target="_blank" rel="noopener">官网</a>可免费下载。<br>安装环境使用<a href="https://zh.wikipedia.org/wiki/%E8%99%9B%E6%93%AC%E6%A9%9F%E5%99%A8" target="_blank" rel="noopener">虚拟机</a>软件VMware Workstation。<br>具体安装过程：<strong>略</strong>。</p><h2 id="3-常用指令"><a href="#3-常用指令" class="headerlink" title="3. 常用指令"></a>3. 常用指令</h2><blockquote><p><strong>pwd</strong>: 打印工作目录（当前目录）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ <span class="built_in">pwd</span></span><br><span class="line">/home/timmger</span><br><span class="line">timmger@timmger-virtual-machine:~$</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p><strong>ls</strong>: 列出当前目录的文或文件夹<br><strong>ls -l</strong>: 详细列出当前目录的文件或文件夹long(<strong>-a</strong>)<br><br><strong>ls -lh</strong>: 让文件大小显示更human-friendly(<strong>-h</strong>)<br><br><strong>ls -lha</strong>: 显示包括隐藏文件的所有文件all files(<strong>-a</strong>)</p></blockquote><p><img src="https://i.loli.net/2019/09/14/aIYvLBf3g7RuyXQ.jpg" alt="005zmjV2ly1g6z0st7egaj30jv075ack.jpg"></p><p><br></p><blockquote><p><strong>cd</strong> : 改变当前目录<br><br><strong>cd peace</strong> : 进入当前目录下的文件夹peace<br><br><strong>cd /../../..</strong> : 使用路径进入任意文件夹(使用tab可自动补全路径)<br><br><strong>cd ~</strong> : 快速返回home directory（tilde）<br><br><strong>cd ..</strong> : 返回上一级</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ <span class="built_in">cd</span> peace</span><br><span class="line">timmger@timmger-virtual-machine:~/peace$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span><br><span class="line">timmger@timmger-virtual-machine:/usr/<span class="built_in">local</span>/bin$ <span class="built_in">cd</span> ~</span><br><span class="line">timmger@timmger-virtual-machine:~$</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p><strong>clear</strong>: 清屏（scroll the shell down）</p></blockquote><p><br></p><blockquote><p><strong>touch</strong>: 用于修改文件或者目录的时间属性(文件不存在，可创建一个空白文件)</p></blockquote><p><br></p><blockquote><p><strong>cat</strong>: concatenate(连接),打印输出文件内容<br><br>使用less可方便阅读长文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ clear .bashrc | less</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p><strong>mkdir</strong>: 创建新文件夹<br><br><strong>mkdir -p ../../..</strong> : 创建一系列文件夹</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ mkdir awesomeplace</span><br><span class="line">timmger@timmger-virtual-machine:~$ ls</span><br><span class="line">awesomeplace      hello    hello.c~  node_modules  公共的  视频  文档  音乐</span><br><span class="line">examples.desktop  hello.c  hexoblog  peace         模板    图片  下载  桌面</span><br><span class="line">timmger@timmger-virtual-machine:~$ mkdir -p awesomeman/awesomedog/2019</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p><strong>mv</strong>: 移动文件或文件夹<br><br><strong>mv awesomeplace/awe.txt .</strong> : 将awesomeplace/awe.txt移动到当前目录（.）<br><br><strong>mv awe.txt very_awe.txt</strong>: 重命名文件</p></blockquote><p><img src="https://i.loli.net/2019/09/14/OPS7Y6i48HEZanC.jpg" alt="005zmjV2ly1g6z3hscjp5j30jx05ggn3.jpg"></p><p><br></p><blockquote><p><strong>rm</strong>: 删除文件<br><br><strong>rmdir</strong>: 删除空文件夹<br><br><strong>rm -r awesomeplace</strong>: 删除awesomeplace目录及文件<br><br><strong>rm -r *</strong>：删除当前目录所有文件及文件夹<br><br><strong>rm -f</strong>: 即使原档案属性设为唯读，亦直接删除，无需逐一确认<br><br><strong><font color="Crimson">rm -rf /</font></strong>: 删库跑路（<font color="Crimson"><strong>慎用！！！</strong></font>）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ rm very_awe.txt </span><br><span class="line">timmger@timmger-virtual-machine:~$ rm awesomeman</span><br><span class="line">rm: 无法删除<span class="string">"awesomeman"</span>: 是一个目录</span><br><span class="line">timmger@timmger-virtual-machine:~$ rmdir awesomeman</span><br><span class="line">timmger@timmger-virtual-machine:~$ rmdir awesomeplace/</span><br><span class="line">rmdir: 删除 <span class="string">"awesomeplace/"</span> 失败: 目录非空</span><br><span class="line">timmger@timmger-virtual-machine:~$ rm -r awesomeplace/</span><br><span class="line">timmger@timmger-virtual-machine:~$ ls</span><br><span class="line">examples.desktop  hello.c   hexoblog      peace   模板  图片  下载  桌面</span><br><span class="line">hello             hello.c~  node_modules  公共的  视频  文档  音乐</span><br><span class="line">timmger@timmger-virtual-machine:~$</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p><strong>man</strong>: 显示命令文档手册（manual pages）<br><br><strong>man chown</strong>: 显示<strong>chown</strong>的命令文档</p></blockquote><p><img src="https://i.loli.net/2019/09/14/T93l4xiFVUrPnWq.jpg" alt="005zmjV2ly1g6z49ngo89j30jv0f343n.jpg"></p><p><br></p><blockquote><p><strong>ssh</strong>: 使用ssh与远程Linux电脑建立连接，并登录你的账户<br><br><strong>ssh username@ipaddress -p port</strong><br><br><strong>w</strong>: 列出当前使用的用户<br><br><strong>exit</strong>: 退出登录</p></blockquote><p><img src="https://i.loli.net/2019/09/14/xKeMEwgS8tq3PaA.jpg" alt="005zmjV2ly1g6zcjt7etbj30jv03njsn.jpg"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@144 ~]<span class="comment"># w</span></span><br><span class="line"> 21:07:50 up 7 days, 21:50,  1 user,  load average: 0.00, 0.00, 0.00</span><br><span class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">root     pts/0    112.3.53.83      21:07    6.00s  0.01s  0.01s w</span><br><span class="line">[root@144 ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>使用公钥登录（免密登录）</strong><a href="https://blog.csdn.net/pipisorry/article/details/52269785" target="_blank" rel="noopener">^1</a><br><br><strong>ssh-keygen</strong>: 生成<strong>公钥</strong>和<strong>私钥</strong>（在$home/.ssh/目录下生成两个文件：<strong>id_rsa.pub</strong>和<strong>id_rsa</strong>）<br><br><strong>ssh-copy-id user@host -p port</strong>: 将公钥传到远程主机上<br><br>若无法登录，检查远程主机的/etc/ssh/sshd_config文件，检查下面几行前面”#”注释是否取掉。<br>    　　RSAAuthentication yes<br><br>    　　PubkeyAuthentication yes<br><br>    　　AuthorizedKeysFile .ssh/authorized_keys<br><br>然后，重启远程主机的ssh服务: <br><br>ubuntu<br><br><code>service ssh restart</code><br><br>debian<br><br><code>etc/init.d/ssh restart</code><br><br>centos<br><br><code>service sshd restart</code></p></blockquote><p><br></p><blockquote><p><strong>ln</strong>: 为某一个文件在另外一个位置建立一个同步（同步修改）的链接(link) <strong>引用或指针</strong><br><br><strong>ln [参数][源文件或目录][目标文件或目录]</strong>: 参数 -s 软链接(符号链接)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">timmger@timmger-virtual-machine:~$ touch file.txt</span><br><span class="line">timmger@timmger-virtual-machine:~$ ln -s file.txt fileLink</span><br><span class="line">timmger@timmger-virtual-machine:~$ ls -l</span><br><span class="line">总用量 84</span><br><span class="line">lrwxrwxrwx   1 timmger timmger     8  9月 14 22:57 fileLink -&gt; file.txt</span><br><span class="line">-rw-rw-r--   1 timmger timmger     0  9月 14 22:57 file.txt</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p><strong>head</strong>: 输出文件前十行<br><br><strong>tail</strong>: 输出文件后十行<br><br><strong>tail -f /var/log/dmesg</strong>: 参数 -f 常用于查阅正在改变的<strong>日志</strong>文件,显示并不断刷新（Ctrl C退出）</p></blockquote><p><br></p><blockquote><p><strong>shutdown -r now</strong>: 关机后重开<br><br><strong>shutdown -h +60</strong>: 一小时后关机停机</p></blockquote><p><br></p><blockquote><p><strong>top</strong>: 显示当前进程状态<br><br><strong>kill 进程ID</strong>: 终止进程</p></blockquote><p><br></p><blockquote><p><strong>chmod</strong>: 设置文件或文件夹的权限标志（permissions flags)<br><strong>-R</strong> : 对目前目录下的所有文件与子目录进行相同的权限变更</p></blockquote><p><strong>flags</strong>定义了三种权限：<strong>read</strong>(r)、<strong>write</strong>(w)、<strong>execute</strong>(x)<br>Linux/Unix 的文件调用角色分为三级 : <strong>文件拥有者</strong>(u)、<strong>群组</strong>(g)、<strong>其他</strong>(o)或者<strong>三者皆是</strong>(a)<br>权限可用数字代替：r = 4, w = 2, x =1，因此rwx = 7, rw = 6, rx = 5  </p><blockquote><p><strong>chmod 765 filename</strong>: 设置文件拥有者rwx权限，设置群组rw权限，设置其他rx权限</p></blockquote><p><br></p><blockquote><p><strong>chown</strong>: 改变文件的owner和group owner<br><strong>sudo chown Rick:Morty filename</strong></p></blockquote><p><br></p><p><strong>参考文章</strong>：<br></p><ol><li><a href="https://blog.csdn.net/pipisorry/article/details/52269785" target="_blank" rel="noopener">https://blog.csdn.net/pipisorry/article/details/52269785</a></li><li><a href="https://www.howtogeek.com/412055/37-important-linux-commands-you-should-know/" target="_blank" rel="noopener">https://www.howtogeek.com/412055/37-important-linux-commands-you-should-know/</a></li><li><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-command-manual.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-什么是Linux&quot;&gt;&lt;a href=&quot;#1-什么是Linux&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是Linux&quot;&gt;&lt;/a&gt;1. 什么是&lt;em&gt;Linux&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikiped
      
    
    </summary>
    
      <category term="Linux" scheme="https://timmger.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://timmger.github.io/tags/Linux/"/>
    
      <category term="ubuntu" scheme="https://timmger.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>斐讯路由修改DNS使用Google Home</title>
    <link href="https://timmger.github.io/2018/11/09/%E6%96%90%E8%AE%AF%E8%B7%AF%E7%94%B1%E4%BF%AE%E6%94%B9DNS%E4%BD%BF%E7%94%A8Google-Home/"/>
    <id>https://timmger.github.io/2018/11/09/斐讯路由修改DNS使用Google-Home/</id>
    <published>2018-11-09T06:53:38.000Z</published>
    <updated>2018-11-09T12:05:46.909Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考文章：<a href="http://buzhiming.me/2018/06/03/google-home/" target="_blank" rel="noopener">http://buzhiming.me/2018/06/03/google-home/</a></p></blockquote><h2 id="设备参考"><a href="#设备参考" class="headerlink" title="设备参考"></a>设备参考</h2><blockquote><ul><li>斐讯k2p(A2)银色</li><li>原厂固件：V22.7.8.5</li><li>刷机固件：斐讯K2P MTK版本的官方固件修改版本</li><li>刷机参考：<a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=221578&amp;page=1&amp;authorid=140971" target="_blank" rel="noopener">斐讯K2P MTK官方固件定制版，加adb、S-S R、KMS等【V1.8】</a></li></ul></blockquote><h2 id="1-添加google-public-dns"><a href="#1-添加google-public-dns" class="headerlink" title="1. 添加google public dns"></a>1. 添加google public dns</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用telnet登录：</span></span><br><span class="line">telnet 192.168.2.1</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改dns:</span></span><br><span class="line">vi /etc/dnsmasq.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#在文件最下面添加两行：</span></span><br><span class="line">server=8.8.8.8</span><br><span class="line">server=8.8.4.4</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存退出</span></span><br></pre></td></tr></table></figure><h2 id="2-设置iptables"><a href="#2-设置iptables" class="headerlink" title="2.设置iptables"></a>2.设置iptables</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -s <span class="number">192</span>.<span class="number">168</span>.<span class="number">2</span>.<span class="number">1</span>/<span class="number">24</span> -p udp --dport <span class="number">53</span> -j DNAT --to <span class="number">192</span>.<span class="number">168</span>.<span class="number">2</span>.<span class="number">1</span></span><br><span class="line">iptables -t nat -A PREROUTING -s <span class="number">192</span>.<span class="number">168</span>.<span class="number">2</span>.<span class="number">1</span>/<span class="number">24</span> -p tcp --dport <span class="number">53</span> -j DNAT --to <span class="number">192</span>.<span class="number">168</span>.<span class="number">2</span>.<span class="number">1</span></span><br><span class="line">iptables -I PREROUTING -t nat -p udp -d <span class="number">8</span>.<span class="number">8</span>.<span class="number">4</span>.<span class="number">4</span> --dport <span class="number">53</span> -j REDIRECT --to-ports <span class="number">53</span></span><br><span class="line">iptables -I PREROUTING -t nat -p udp -d <span class="number">8</span>.<span class="number">8</span>.<span class="number">8</span>.<span class="number">8</span> --dport <span class="number">53</span> -j REDIRECT --to-ports <span class="number">53</span></span><br><span class="line">iptables -I PREROUTING -t nat -p tcp -d <span class="number">8</span>.<span class="number">8</span>.<span class="number">4</span>.<span class="number">4</span> --dport <span class="number">53</span> -j REDIRECT --to-ports <span class="number">53</span></span><br><span class="line">iptables -I PREROUTING -t nat -p tcp -d <span class="number">8</span>.<span class="number">8</span>.<span class="number">8</span>.<span class="number">8</span> --dport <span class="number">53</span> -j REDIRECT --to-ports <span class="number">53</span></span><br></pre></td></tr></table></figure><p>以上，设置完毕</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;参考文章：&lt;a href=&quot;http://buzhiming.me/2018/06/03/google-home/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://buzhiming.me/2018/06/03/goo
      
    
    </summary>
    
      <category term="折腾" scheme="https://timmger.github.io/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="Google Home" scheme="https://timmger.github.io/tags/Google-Home/"/>
    
      <category term="斐讯路由" scheme="https://timmger.github.io/tags/%E6%96%90%E8%AE%AF%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://timmger.github.io/2018/11/09/hello-world/"/>
    <id>https://timmger.github.io/2018/11/09/hello-world/</id>
    <published>2018-11-09T02:53:34.815Z</published>
    <updated>2018-11-09T02:53:34.815Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
